# Plone Production configuration file
[buildout]

extends =
    base.cfg
    sources.cfg
    custom-settings.cfg
    production-versions.cfg
    hotfix.cfg
    maintenance.cfg

parts +=
    client-debug
    sitecustomize-base
    client1-sitecustomize
    client-debug-sitecustomize
    nginx-config
    nginx-vhost-conf
    supervisor
    supervisor-crontab
    os-config
    atcontenttypes-conf
#    plone-site

##############################################################################
#  Configurations.
##############################################################################

# Zeo client instance for debugging
[client-debug]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client-debug}:${ports:client-debug}
port-base             = 2
debug-mode            = on
verbose-security      = on
zodb-cache-size       = 5000
# Put the log, pid, loc files in var/client-debug
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

[client1-sitecustomize]
<= sitecustomize-base
output = ${client1:location}/sitecustomize.py

[client-debug-sitecustomize]
<= sitecustomize-base
output = ${client-debug:location}/sitecustomize.py

# This recipe generates Nginx Web Server configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx.conf.in
output = ${buildout:directory}/etc/nginx/nginx.conf
worker_processes = ${nginx:worker_processes}
worker_connections = ${nginx:worker_connections}

# This recipe generates VirtualHost Nginx Web Server configuration
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-vhost-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx-vhost.conf.in
output = ${buildout:directory}/etc/nginx/nginx-vhost.conf

##############################################################################
# Supervisor
##############################################################################

# This recipe help to install Supervisor, one to rule them all
# For options see http://pypi.python.org/pypi/collective.recipe.supervisor
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
user = ${supervisor-settings:user}
password = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
loglevel = info
logfile = ${buildout:directory}/var/log/supervisord.log
logfile_maxbytes = 50MB
logfile_backups = 10
pidfile = ${buildout:directory}/var/supervisord.pid
file = ${buildout:directory}/var/supervisord.sock
chmod = 0700
nodaemon = false
#plugins = superlance
programs =
#  Prio Name      Program                                      Params
   10   zeoserver ${buildout:bin-directory}/zeoserver	[foreground]	${zeoserver:location} 	true
   20   client1 ${buildout:bin-directory}/client1	[console] ${client1:location}	true

eventlisteners =
# Check every 60 seconds that no child process has exceeded. it's like a RSS memory quota
#    MemoryMonitor TICK_60 ${buildout:bin-directory}/memmon [-g zeo-clients=${quotas:instance-memory} -m ${site-settings:mail-for-errors}]
# Check every 60 seconds whether the plone instance is alive
#    HttpOk1 TICK_60 ${buildout:bin-directory}/httpok [-p client1 -t 20 http://${hosts:client1}:${ports:client1}/${site-settings:site-id}]

groups =
    10 zeo-cluster zeoserver
    20 zeo-clients client1
#    30 httpok HttpOk1

# This recipe help to Run once Supervisor, at startup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[supervisor-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @reboot
command = ${buildout:bin-directory}/supervisord

# Helper script to update Services configurations into Operative System
# For options see http://pypi.python.org/pypi/collective.recipe.template
[os-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/update-so-config.sh.in
output = ${buildout:bin-directory}/update-so-config.sh
mode = 700

# This recipe helps to generate an ATContentTypes configuration file
# in the etc/ folder of a zope instance
# For options see http://pypi.python.org/pypi/plone.recipe.atcontenttypes
[atcontenttypes-conf]
recipe = plone.recipe.atcontenttypes

# The path(s) where your zope instance(s) is(are) installed.
# If you are also using the plone.recipe.zope2instance recipe (like the second example above),
# and you have that configured as a part called 'instance' prior to the atcontenttypes part,
# you can use ${instance:location} for this parameter.
zope-instance-location =
    ${client1:location}
    ${client-debug:location}

# allow files up to 1024kb, for example
max-file-size =
    ATImage:${quotas:image}
    ATFile:${quotas:file}
    ATNewsItem:${quotas:newsitem}

# This option let you set the maximum image dimension ("w, h"). "0,0" means no rescaling of the original image.
max-image-dimension =
    ATNewsItem:${quotas:max-image-dimension-newsitem}
    ATImage:${quotas:max-image-dimension}

# This option affects the quality images get saved with.
pil-quality = ${quotas:pil-image-quality}

# This recipe helps create a Plone web site with his policy
# For options see http://pypi.python.org/pypi/collective.recipe.plonesite
#
[plone-site]
recipe = collective.recipe.plonesite
site-id = ${site-settings:site-id}
instance = client1
zeoserver = zeoserver
profiles-initial = Products.CMFPlone:plone-content
profiles = acaeslanoticia.policy:default
default-language = ${time-and-languages:languages}
enabled = true
site-replace = false
